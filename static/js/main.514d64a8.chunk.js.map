{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","context","resizeListener","width","getWidth","height","getHeight","setState","onRun","codevalue","state","value","onChange","newValue","onLangChange","event","selectedLanguage","target","onThemeChange","darkmode","thememode","downloadToTxtFile","el","document","createElement","textcode","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","window","innerWidth","console","log","heigth","innerHeight","languages","addEventListener","this","removeEventListener","Container","maxWidth","style","backgroundColor","Grid","container","spacing","item","xs","sm","display","alignItems","AppBar","position","color","Toolbar","Typography","variant","Button","endIcon","onClick","marginLeft","placeholder","mode","theme","name","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","srcDoc","title","justifyContent","textDecoration","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.514d64a8.chunk.js","sourcesContent":["import React from 'react';\n// Import Brace and the AceEditor Component\nimport AceEditor from 'react-ace';\n\n// Import a Mode (language)\nimport 'brace/mode/html';\nimport 'brace/mode/css';\nimport 'brace/mode/javascript';\nimport 'brace/mode/java';\nimport 'brace/mode/python';\nimport 'brace/mode/xml';\nimport 'brace/mode/ruby';\nimport 'brace/mode/sass';\nimport 'brace/mode/markdown';\nimport 'brace/mode/mysql';\nimport 'brace/mode/json';\nimport 'brace/mode/handlebars';\nimport 'brace/mode/golang';\nimport 'brace/mode/csharp';\nimport 'brace/mode/elixir';\nimport 'brace/mode/typescript';\n\n\n// Import a Theme (okadia, github, xcode etc)\nimport 'brace/theme/monokai';\nimport 'brace/theme/github';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport SaveIcon from '@material-ui/icons/Save';\nimport BrightnessMediumIcon from '@material-ui/icons/BrightnessMedium';\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nexport default class App extends React.Component {\n\n\n\n  constructor(props, context) {\n    super(props, context);\n    var width = this.getWidth();\n    var height = this.getHeight();\n    const languages = [\n      \"javascript\",\n      \"java\",\n      \"python\",\n      \"xml\",\n      \"ruby\",\n      \"sass\",\n      \"markdown\",\n      \"mysql\",\n      \"json\",\n      \"html\",\n      \"handlebars\",\n      \"golang\",\n      \"csharp\",\n      \"elixir\",\n      \"typescript\",\n      \"css\"\n    ];\n    this.state = {\n      value: '',\n      darkmode: true,\n      thememode: \"monokai\",\n      height,\n      width,\n      codevalue: '',\n      languages: languages,\n      selectedLanguage: \"html\"\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.resizeListener);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resizeListener);\n  }\n\n  resizeListener = () => {\n    var width = this.getWidth();\n    var height = this.getHeight();\n    this.setState({\n      width,\n      height\n    })\n  }\n\n  onRun = () => {\n    var codevalue = this.state.value;\n    this.setState({\n      codevalue\n    })\n  }\n\n  onChange = (newValue) => {\n    this.setState({\n      value: newValue\n    })\n  }\n\n  onLangChange = (event) => {\n    this.setState({\n      selectedLanguage: event.target.value\n    })\n  }\n\n  onThemeChange = () => {\n    var darkmode = !this.state.darkmode;\n    var thememode = \"github\"\n    if (darkmode) {\n      thememode = \"monokai\"\n    } else {\n      thememode = \"github\"\n    }\n    this.setState({\n      thememode,\n      darkmode\n    })\n  }\n\n  downloadToTxtFile = () => {\n    const el = document.createElement(\"a\");\n    var textcode = this.state.value;\n    const file = new Blob([textcode], { type: 'text/plain' });\n    el.href = URL.createObjectURL(file);\n    el.download = \"download.txt\";\n    document.body.appendChild(el);\n    el.click();\n  }\n\n  getWidth = () => {\n    var width = window.innerWidth;\n    if (width > 1920) {\n      width = (width - 400) / 2;\n    }\n    else if (width > 1280) {\n      width = (width - 300) / 2;\n    }\n    else if (width > 960) {\n      width = (width - 200) / 2;\n    }\n    else if (width > 600) {\n      width = (width - 150) / 2;\n    }\n    else {\n      width = width - 50;\n    }\n    console.log(width + \"px\")\n    return width + \"px\";\n\n  }\n\n  getHeight = () => {\n    var width = window.innerWidth - 800;\n    var heigth = window.innerHeight;\n    if (width > 1920) {\n      //\n    }\n    else if (width > 1280) {\n      //\n    }\n    else if (width > 960) {\n      //\n    }\n    else if (width > 600) {\n      heigth = heigth / 2;\n    }\n    else {\n      heigth = heigth / 2;\n    }\n    console.log(heigth)\n    return heigth + \"px\";\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"xl\" style={this.state.darkmode ? { backgroundColor: '#404452' } : { backgroundColor: '#ffffff' }}>\n        <Grid container spacing={3} style={{ height: window.innerHeight }}>\n          <Grid item xs={12}>\n            <Grid container spacing={1}>\n              <Grid item xs={12} sm={12} style={{ display: \"flex\", alignItems: \"center\" }}>\n                <AppBar position=\"static\" color={this.state.darkmode ? 'secondary' : 'primary'}\n                  style={this.state.darkmode ? { backgroundColor: '#404452' } : { backgroundColor: '#1976d2' }}>\n                  <Toolbar>\n                    <Typography variant=\"h6\">\n                      DC FrontEnd Editor\n                    </Typography>\n                    <Button\n                      endIcon={<BrightnessMediumIcon />}\n                      onClick={this.onThemeChange}\n                      style={{ marginLeft: 20, color: '#fff' }}\n                    >\n                      Dark Mode\n                  </Button>\n                    <Button\n                      endIcon={<SaveIcon />}\n                      onClick={this.downloadToTxtFile}\n                      style={{ marginLeft: 20, color: '#fff' }}\n                    >\n                      Save\n              </Button>\n                    <Button\n                      endIcon={<DoubleArrowIcon />}\n                      onClick={this.onRun}\n                      style={{ marginLeft: 20, color: '#fff' }}\n                    >\n                      Run\n              </Button>\n                    {/* <FormControl style={{ marginLeft: 20, color: '#fff' }}>\n                      <InputLabel id=\"lan-native-simple\" style={{ color: '#fff' }} >Language</InputLabel>\n                      <Select\n                        style={{ color: '#fff' }}\n                        labelId=\"lan-native-simple\"\n                        id=\"lan-native-simple-select\"\n                        value={this.state.selectedLanguage}\n                        onChange={this.onLangChange}\n                      >\n                        {this.state.languages.map(lan => {\n                          return <MenuItem value={lan}>{lan}</MenuItem>\n                        })}\n                      </Select>\n                    </FormControl> */}\n                  </Toolbar>\n                </AppBar>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <AceEditor\n              placeholder=\"Type your code here..... Happy Coding...\"\n              mode={this.state.selectedLanguage}\n              theme={this.state.thememode}\n              name=\"blah2\"\n              onChange={this.onChange}\n              value={this.state.value}\n              fontSize={14}\n              showPrintMargin={false}\n              showGutter={true}\n              highlightActiveLine={true}\n              height={this.state.height}\n              width={this.state.width}\n              setOptions={{\n                useWorker: true,\n                enableBasicAutocompletion: true,\n                enableLiveAutocompletion: true,\n                enableSnippets: true,\n                showLineNumbers: true,\n                tabSize: 2,\n              }} />\n          </Grid>\n          <Grid item xs={12} sm={6}>\n            <iframe srcDoc={this.state.codevalue} height={this.state.height} style={{ backgroundColor: '#ffffff' }}\n              width={this.state.width} name=\"iframe_code\" title=\"Code Visual\"></iframe>\n          </Grid>\n          <Grid item xs={12} sm={12} style={{ display: \"flex\", alignItems: \"flex-end\", justifyContent: \"center\" }}>\n            <i style={this.state.darkmode ? { color: '#ffffff' } : { color: '#404452' }}> Made with ❤️ by\n            <a href=\"https://www.linkedin.com/in/dineshdc7\"\n                style={this.state.darkmode ? { color: 'hotpink', textDecoration: 'none' } :\n                  { color: 'red', textDecoration: 'none' }}> <b>Dinesh Choudhary</b></a></i>\n          </Grid>\n        </Grid>\n      </Container >\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}