{"version":3,"sources":["App.js","index.js"],"names":["App","props","context","resizeListener","width","getWidth","height","getHeight","setState","onRun","codevalue","state","value","onChange","newValue","onLangChange","event","selectedLanguage","target","onThemeChange","darkmode","thememode","downloadToTxtFile","el","document","createElement","textcode","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","window","innerWidth","console","log","heigth","innerHeight","languages","addEventListener","this","removeEventListener","Container","maxWidth","style","backgroundColor","Grid","container","spacing","item","xs","sm","display","alignItems","AppBar","position","color","Toolbar","md","Typography","variant","Button","endIcon","onClick","marginLeft","float","placeholder","mode","theme","name","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","srcDoc","title","justifyContent","textDecoration","React","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e03b7e3d.chunk.js","sourcesContent":["import React from 'react';\r\n// Import Brace and the AceEditor Component\r\nimport AceEditor from 'react-ace';\r\n\r\n// Import a Mode (language)\r\nimport 'brace/mode/html';\r\nimport 'brace/mode/css';\r\nimport 'brace/mode/javascript';\r\nimport 'brace/mode/xml';\r\nimport 'brace/mode/sass';\r\nimport 'brace/mode/markdown';\r\nimport 'brace/mode/mysql';\r\nimport 'brace/mode/json';\r\nimport 'brace/mode/handlebars';\r\nimport 'brace/mode/elixir';\r\nimport 'brace/mode/typescript';\r\n\r\n\r\n// Import a Theme (okadia, github, xcode etc)\r\nimport 'brace/theme/monokai';\r\nimport 'brace/theme/github';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport BrightnessMediumIcon from '@material-ui/icons/BrightnessMedium';\r\nimport DoubleArrowIcon from '@material-ui/icons/DoubleArrow';\r\nimport Container from '@material-ui/core/Container';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default class App extends React.Component {\r\n\r\n\r\n\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    var width = this.getWidth();\r\n    var height = this.getHeight();\r\n    const languages = [\r\n      \"javascript\",\r\n      \"java\",\r\n      \"python\",\r\n      \"xml\",\r\n      \"ruby\",\r\n      \"sass\",\r\n      \"markdown\",\r\n      \"mysql\",\r\n      \"json\",\r\n      \"html\",\r\n      \"handlebars\",\r\n      \"golang\",\r\n      \"csharp\",\r\n      \"elixir\",\r\n      \"typescript\",\r\n      \"css\"\r\n    ];\r\n    this.state = {\r\n      value: '',\r\n      darkmode: true,\r\n      thememode: \"monokai\",\r\n      height,\r\n      width,\r\n      codevalue: '',\r\n      languages: languages,\r\n      selectedLanguage: \"html\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.resizeListener);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resizeListener);\r\n  }\r\n\r\n  resizeListener = () => {\r\n    var width = this.getWidth();\r\n    var height = this.getHeight();\r\n    this.setState({\r\n      width,\r\n      height\r\n    })\r\n  }\r\n\r\n  onRun = () => {\r\n    var codevalue = this.state.value;\r\n    this.setState({\r\n      codevalue\r\n    })\r\n  }\r\n\r\n  onChange = (newValue) => {\r\n    this.setState({\r\n      value: newValue\r\n    })\r\n  }\r\n\r\n  onLangChange = (event) => {\r\n    this.setState({\r\n      selectedLanguage: event.target.value\r\n    })\r\n  }\r\n\r\n  onThemeChange = () => {\r\n    var darkmode = !this.state.darkmode;\r\n    var thememode = \"github\"\r\n    if (darkmode) {\r\n      thememode = \"monokai\"\r\n    } else {\r\n      thememode = \"github\"\r\n    }\r\n    this.setState({\r\n      thememode,\r\n      darkmode\r\n    })\r\n  }\r\n\r\n  downloadToTxtFile = () => {\r\n    const el = document.createElement(\"a\");\r\n    var textcode = this.state.value;\r\n    const file = new Blob([textcode], { type: 'text/plain' });\r\n    el.href = URL.createObjectURL(file);\r\n    el.download = \"download.txt\";\r\n    document.body.appendChild(el);\r\n    el.click();\r\n  }\r\n\r\n  getWidth = () => {\r\n    var width = window.innerWidth;\r\n    if (width > 1920) {\r\n      width = (width - 400) / 2;\r\n    }\r\n    else if (width > 1280) {\r\n      width = (width - 300) / 2;\r\n    }\r\n    else if (width > 960) {\r\n      width = (width - 200) / 2;\r\n    }\r\n    else if (width > 600) {\r\n      width = (width - 150) / 2;\r\n    }\r\n    else {\r\n      width = width - 50;\r\n    }\r\n    console.log(width + \"px\")\r\n    return width + \"px\";\r\n\r\n  }\r\n\r\n  getHeight = () => {\r\n    var width = window.innerWidth - 800;\r\n    var heigth = window.innerHeight;\r\n    if (width > 1920) {\r\n      //\r\n    }\r\n    else if (width > 1280) {\r\n      //\r\n    }\r\n    else if (width > 960) {\r\n      //\r\n    }\r\n    else if (width > 600) {\r\n      heigth = heigth / 2;\r\n    }\r\n    else {\r\n      heigth = heigth / 2;\r\n    }\r\n    console.log(heigth)\r\n    return heigth + \"px\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container maxWidth=\"xl\" style={this.state.darkmode ? { backgroundColor: '#404452' } : { backgroundColor: '#ffffff' }}>\r\n        <Grid container spacing={3} style={{ height: window.innerHeight }}>\r\n          <Grid item xs={12}>\r\n            <Grid container spacing={1}>\r\n              <Grid item xs={12} sm={12} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <AppBar position=\"static\" color={this.state.darkmode ? 'secondary' : 'primary'}\r\n                  style={this.state.darkmode ? { backgroundColor: '#404452' } : { backgroundColor: '#1976d2' }}>\r\n                  <Toolbar>\r\n                    <Grid container>\r\n                      <Grid item xs={12} sm={6} md={6} style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <Typography variant=\"h6\">\r\n                          DC FrontEnd Editor\r\n                        </Typography>\r\n                        <Button\r\n                          endIcon={<DoubleArrowIcon />}\r\n                          onClick={this.onRun}\r\n                          style={{ marginLeft: 20, color: '#fff' }}\r\n                        >\r\n                          Run\r\n                        </Button>\r\n                      </Grid>\r\n                      <Grid item xs={9} sm={6} md={6}>\r\n                        <Button\r\n                          endIcon={<BrightnessMediumIcon />}\r\n                          onClick={this.onThemeChange}\r\n                          style={{ marginLeft: 20, color: '#fff', float: 'right' }}\r\n                        >\r\n                          {this.state.darkmode ? \"Light Mode\" : \"Dark Mode\"}\r\n                        </Button>\r\n                        <Button\r\n                          endIcon={<SaveIcon />}\r\n                          onClick={this.downloadToTxtFile}\r\n                          style={{ color: '#fff', float: 'right' }}\r\n                        >\r\n                          Save\r\n                        </Button>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Toolbar>\r\n                </AppBar>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <AceEditor\r\n              placeholder=\"Type your code here..... Happy Coding...\"\r\n              mode={this.state.selectedLanguage}\r\n              theme={this.state.thememode}\r\n              name=\"blah2\"\r\n              onChange={this.onChange}\r\n              value={this.state.value}\r\n              fontSize={14}\r\n              showPrintMargin={false}\r\n              showGutter={true}\r\n              highlightActiveLine={true}\r\n              height={this.state.height}\r\n              width={this.state.width}\r\n              setOptions={{\r\n                useWorker: true,\r\n                enableBasicAutocompletion: true,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: true,\r\n                showLineNumbers: true,\r\n                tabSize: 2,\r\n              }} />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <iframe srcDoc={this.state.codevalue} height={this.state.height} style={{ backgroundColor: '#ffffff' }}\r\n              width={this.state.width} name=\"iframe_code\" title=\"Code Visual\"></iframe>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} style={{ display: \"flex\", alignItems: \"flex-end\", justifyContent: \"center\" }}>\r\n            <i style={this.state.darkmode ? { color: '#ffffff' } : { color: '#404452' }}> Made with ❤️ by\r\n              <a href=\"https://www.linkedin.com/in/dineshdc7\"\r\n                style={this.state.darkmode ? { color: 'hotpink', textDecoration: 'none' } :\r\n                  { color: 'red', textDecoration: 'none' }}> <b>Dinesh Choudhary</b></a></i>\r\n          </Grid>\r\n        </Grid>\r\n      </Container >\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}